/*
   This file was generated automatically by the Mojo IDE version B1.3.6.
   Do not edit this file directly. Instead edit the original Lucid source.
   This is a temporary file and any changes made to it will be destroyed.
*/

module alu_1 (
    input [5:0] alufn,
    input [15:0] a,
    input [15:0] b,
    output reg [15:0] out,
    output reg z,
    output reg v,
    output reg n
  );
  
  
  
  wire [16-1:0] M_myAdder_out;
  wire [1-1:0] M_myAdder_z;
  wire [1-1:0] M_myAdder_v;
  wire [1-1:0] M_myAdder_n;
  reg [16-1:0] M_myAdder_a;
  reg [16-1:0] M_myAdder_b;
  reg [2-1:0] M_myAdder_alufnIn;
  adder_4 myAdder (
    .a(M_myAdder_a),
    .b(M_myAdder_b),
    .alufnIn(M_myAdder_alufnIn),
    .out(M_myAdder_out),
    .z(M_myAdder_z),
    .v(M_myAdder_v),
    .n(M_myAdder_n)
  );
  
  wire [16-1:0] M_myBool_out;
  reg [16-1:0] M_myBool_a;
  reg [16-1:0] M_myBool_b;
  reg [4-1:0] M_myBool_alufnIn;
  bool_5 myBool (
    .a(M_myBool_a),
    .b(M_myBool_b),
    .alufnIn(M_myBool_alufnIn),
    .out(M_myBool_out)
  );
  
  wire [16-1:0] M_myShift_out;
  reg [16-1:0] M_myShift_a;
  reg [4-1:0] M_myShift_b;
  reg [3-1:0] M_myShift_alufnIn;
  shifter_6 myShift (
    .a(M_myShift_a),
    .b(M_myShift_b),
    .alufnIn(M_myShift_alufnIn),
    .out(M_myShift_out)
  );
  
  wire [1-1:0] M_myCompare_out;
  reg [16-1:0] M_myCompare_a;
  reg [16-1:0] M_myCompare_b;
  reg [2-1:0] M_myCompare_alufnIn;
  compare_7 myCompare (
    .a(M_myCompare_a),
    .b(M_myCompare_b),
    .alufnIn(M_myCompare_alufnIn),
    .out(M_myCompare_out)
  );
  
  always @* begin
    M_myAdder_a = a;
    M_myAdder_b = b;
    M_myAdder_alufnIn = alufn[0+1-:2];
    M_myBool_a = a;
    M_myBool_b = b;
    M_myBool_alufnIn = alufn[0+3-:4];
    M_myShift_a = a;
    M_myShift_b = b[0+3-:4];
    M_myShift_alufnIn = alufn[0+2-:3];
    M_myCompare_a = a;
    M_myCompare_b = b;
    M_myCompare_alufnIn = alufn[1+1-:2];
    
    case (alufn[4+1-:2])
      2'h0: begin
        out = M_myAdder_out;
      end
      2'h1: begin
        out = M_myBool_out;
      end
      2'h2: begin
        out = M_myShift_out;
      end
      2'h3: begin
        out = M_myCompare_out;
      end
      default: begin
        out = 1'h0;
      end
    endcase
    z = M_myAdder_z;
    v = M_myAdder_v;
    n = M_myAdder_n;
  end
endmodule
